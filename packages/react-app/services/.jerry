// // import { useState } from "react";
// import StableTokenABI from "./cusd-abi.json";
// import MinipayNFTABI from "./minipay-nft.json";
// import {
//     createPublicClient,
//     createWalletClient,
//     custom,
//     getContract,
//     http,
//     parseEther,
//     stringToHex,
//     formatEther,
// } from "viem";
// import { celoAlfajores } from "viem/chains";
// import axios from 'axios';

// const publicClient = createPublicClient({
//     chain: celoAlfajores,
//     transport: http(),
// });

// const cUSDTokenAddress = "0x874069Fa1Eb16D44d622F2e0Ca25eeA172369bC1"; // Testnet
// const MINIPAY_NFT_CONTRACT = "0xE8F4699baba6C86DA9729b1B0a1DA1Bd4136eFeF"; // Testnet
// const FEE_RECIPIENT = "your-minipay-wallet-address"; // Replace with your MiniPay wallet address
// const FLUTTERWAVE_API_URL = "https://api.flutterwave.com/v3/transfers";

// export const useWeb3 = () => {
//     const [address, setAddress] = useState<string | null>(null);
//     const [balance, setBalance] = useState<string>("0");

//     const getUserAddress = async () => {
//         if (typeof window !== "undefined" && window.ethereum) {
//             let walletClient = createWalletClient({
//                 transport: custom(window.ethereum),
//                 chain: celoAlfajores,
//             });

//             let [address] = await walletClient.getAddresses();
//             setAddress(address);
//             fetchBalance(address);
//         }
//     };

//     const fetchBalance = async (userAddress: string) => {
//         try {
//             const balanceInBigNumber = await publicClient.readContract({
//                 address: cUSDTokenAddress,
//                 abi: StableTokenABI.abi,
//                 functionName: "balanceOf",
//                 args: [userAddress],
//             });
//             const balance = formatEther(balanceInBigNumber.toString());
//             setBalance(balance);
//         } catch (error) {
//             console.error("Error fetching balance:", error);
//         }
//     };

//     const convertCurrency = async (amount: string, from: string, to: string) => {
//         try {
//             const response = await axios.get(`https://openexchangerates.org/api/latest.json`, {
//                 params: {
//                     app_id: process.env.REACT_APP_OPEN_EXCHANGE_RATES_API_KEY,
//                     base: from,
//                     symbols: to,
//                 }
//             });
//             const exchangeRate = response.data.rates[to];
//             return parseFloat(amount) * exchangeRate;
//         } catch (error) {
//             console.error("Error converting currency:", error);
//             throw new Error("Failed to convert currency.");
//         }
//     };

//     const sendCUSD = async (to: string, amount: string) => {
//         try {
//             let walletClient = createWalletClient({
//                 transport: custom(window.ethereum),
//                 chain: celoAlfajores,
//             });

//             let [address] = await walletClient.getAddresses();
//             const amountInWei = parseEther(amount);

//             const tx = await walletClient.writeContract({
//                 address: cUSDTokenAddress,
//                 abi: StableTokenABI.abi,
//                 functionName: "transfer",
//                 account: address,
//                 args: [to, amountInWei],
//             });

//             let receipt = await publicClient.waitForTransactionReceipt({
//                 hash: tx,
//             });

//             return receipt;
//         } catch (error) {
//             console.error("Error sending cUSD:", error);
//             throw new Error("Failed to send cUSD.");
//         }
//     };

//     const sendToMobileMoney = async (recipient: string, amountInUSD: string, country: string, currency: string) => {
//         try {
//             const convertedAmount = await convertCurrency(amountInUSD, "USD", currency);
//             const fee = calculateTransactionFee(convertedAmount);
//             const totalAmount = convertedAmount + fee;

//             const txReceipt = await sendCUSD(FEE_RECIPIENT, fee.toString());
//             if (!txReceipt) throw new Error("Transaction failed");

//             const flutterwaveResponse = await axios.post(FLUTTERWAVE_API_URL, {
//                 account_bank: "Flutterwave_bank_code", // Replace with actual bank code
//                 account_number: recipient,
//                 amount: totalAmount,
//                 currency: currency,
//                 narration: "MiniPay Transfer",
//                 reference: `tx-${Date.now()}`, // Generate a unique reference
//                 callback_url: "your-callback-url",
//             }, {
//                 headers: {
//                     Authorization: `Bearer ${process.env.REACT_APP_FLUTTERWAVE_SECRET_KEY}`
//                 }
//             });

//             return flutterwaveResponse.data;
//         } catch (error) {
//             console.error("Error sending to mobile money:", error);
//             throw new Error("Failed to send to mobile money.");
//         }
//     };

//     const calculateTransactionFee = (amount: number) => {
//         const feePercentage = 0.01; 
//         return amount * feePercentage;
//     };

//     return {
//         address,
//         balance,
//         getUserAddress,
//         fetchBalance,
//         sendCUSD,
//         sendToMobileMoney,
//     };
// };
